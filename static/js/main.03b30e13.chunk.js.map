{"version":3,"sources":["Town.tsx","CT.tsx","Quiz.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["patterns","orientations","React","memo","centroid","geo","index","selectedTowns","finalSelection","findWikipedia","handleMarkerClick","selection","isSelected","includes","useEffect","markerFill","color","pattern","Math","floor","random","length","orientation","Fragment","key","rsmKey","geography","fill","strokeWidth","stroke","style","default","outline","hover","pressed","tabIndex","id","height","width","background","radius","coordinates","onClick","e","data-testid","r","prevProps","nextProps","CT","projection","projectionConfig","scale","viewBox","xmlns","json","features","geographies","map","i","geoCentroid","subject","dx","dy","connectorProps","strokeLinecap","y","fontSize","fontWeight","textAnchor","console","log","properties","town","QuizContainer","styled","div","Round","h5","Score","PleaseSelect","Quiz","appState","finalWiki","resetRound","useState","score","setScore","round","setRound","attempts","setAttempts","isFinished","setIsFinished","handleNext","prev","playAgain","status","size","currentWikis","summary","href","wikipediaUrl","target","rel","undefined","disabled","error","display","reducer","state","action","type","results","getRandomInt","max","FlexContainer","App","setFinalSelection","setFinalWiki","setSelection","setSelectedTowns","useReducer","dispatch","indexOf","push","a","fetch","process","response","wiki","geonames","preventDefault","Boolean","window","location","hostname","match","customTheme","components","css","ReactDOM","render","StrictMode","theme","DEFAULT_THEME","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.03b30e13.chunk.js","sourcesContent":["import React, { FunctionComponent, useEffect } from 'react';\nimport { Marker, Geography, Point } from 'react-simple-maps';\nimport { PatternLines, PatternWaves, PatternCircles } from '@vx/pattern';\nimport { PatternOrientationType } from '@vx/pattern/lib/constants';\n\ninterface TownProps {\n  centroid: Point;\n  geo: any;\n  index: number;\n  selectedTowns: number[];\n  finalSelection: number;\n  findWikipedia: Function;\n  handleMarkerClick: Function;\n  selection: number | undefined;\n}\n\ntype Orientation = 'diagonal' | 'horizontal' | 'vertical';\ntype Pattern = 'wave' | 'line' | 'circle';\n\nconst patterns: Pattern[] = ['wave', 'line', 'circle', 'line', 'wave'];\nconst orientations: Orientation[] = ['horizontal', 'vertical', 'diagonal'];\n\nconst Town: FunctionComponent<TownProps> = ({\n  centroid,\n  geo,\n  index,\n  selectedTowns,\n  finalSelection,\n  findWikipedia,\n  handleMarkerClick,\n  selection,\n}) => {\n  const isSelected: boolean = selectedTowns.includes(index);\n\n  useEffect((): void => {\n    if (index === selectedTowns[finalSelection]) {\n      findWikipedia(centroid);\n    }\n  }, [centroid, finalSelection, findWikipedia, index, selectedTowns]);\n\n  const markerFill =\n    selection && selectedTowns[finalSelection] === index\n      ? '#228F67'\n      : selection\n      ? '#D93F4C'\n      : 'white';\n\n  const color =\n    selection && selectedTowns[finalSelection] === index\n      ? '#228F67'\n      : selection && isSelected\n      ? '#D93F4C'\n      : '#0C2D83';\n\n  const pattern: Pattern =\n    patterns[Math.floor(Math.random() * patterns.length)];\n  const orientation: PatternOrientationType =\n    orientations[Math.floor(Math.random() * orientations.length)];\n\n  return (\n    <React.Fragment key={geo.rsmKey}>\n      <Geography\n        geography={geo}\n        fill={`url('#${index}-${pattern}')`}\n        strokeWidth={0.005}\n        stroke={'white'}\n        style={{\n          default: { outline: 'none' },\n          hover: { outline: 'none' },\n          pressed: { outline: 'none' },\n        }}\n        tabIndex={-1}\n      />\n      <PatternLines\n        id={`${index}-line`}\n        height={0.2}\n        width={0.2}\n        stroke=\"white\"\n        strokeWidth={0.005}\n        background={color}\n        orientation={[orientation]}\n      />\n\n      <PatternCircles\n        id={`${index}-circle`}\n        height={0.2}\n        width={0.2}\n        strokeWidth={0.009}\n        background={color}\n        stroke=\"white\"\n        radius={0.005}\n      />\n\n      <PatternWaves\n        id={`${index}-wave`}\n        height={0.2}\n        width={0.2}\n        stroke=\"white\"\n        strokeWidth={0.005}\n        background={color}\n      />\n      <Marker\n        coordinates={centroid}\n        onClick={(e) => handleMarkerClick(e, selectedTowns, index)}\n      >\n        {isSelected && (\n          <circle\n            data-testid=\"marker\"\n            r={0.2}\n            fill={markerFill}\n            stroke=\"#fff\"\n            strokeWidth={0.003}\n          />\n        )}\n      </Marker>\n    </React.Fragment>\n  );\n};\n\nconst comparator = (prevProps: TownProps, nextProps: TownProps): boolean => {\n  const isSelected: boolean = nextProps.selectedTowns.includes(nextProps.index);\n\n  if (prevProps.selectedTowns !== nextProps.selectedTowns) return false;\n\n  if (prevProps.selection !== nextProps.selection && isSelected) return false;\n\n  return true;\n};\n\nexport default React.memo(Town, comparator);\n","import React, { FunctionComponent } from 'react';\nimport { ComposableMap, Geographies, Annotation } from 'react-simple-maps';\nimport { geoCentroid } from 'd3-geo';\n\nimport Town from './Town';\nimport json from './CT.geo.json';\n\ninterface CTProps {\n  findWikipedia: Function;\n  handleMarkerClick: Function;\n  selection: number | undefined;\n  selectedTowns: number[];\n  finalSelection: number;\n}\n\nconst width = 800;\nconst height = 600;\n\nconst CT: FunctionComponent<CTProps> = ({\n  findWikipedia,\n  handleMarkerClick,\n  selection,\n  selectedTowns,\n  finalSelection,\n}) => {\n  return (\n    <ComposableMap\n      projection=\"geoAlbersUsa\"\n      projectionConfig={{ scale: 820 }}\n      width={width}\n      height={height}\n      viewBox=\"634 219 36 36\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <Geographies geography={json.features}>\n        {({ geographies }) =>\n          geographies.map((geo, i) => {\n            const centroid = geoCentroid(geo);\n\n            return (\n              <Town\n                geo={geo}\n                key={geo.rsmKey}\n                centroid={centroid}\n                index={i}\n                selectedTowns={selectedTowns}\n                finalSelection={finalSelection}\n                findWikipedia={findWikipedia}\n                handleMarkerClick={handleMarkerClick}\n                selection={selection}\n              />\n            );\n          })\n        }\n      </Geographies>\n      {selection && (\n        <Geographies geography={json.features}>\n          {({ geographies }) =>\n            geographies.map((geo, i) => {\n              const centroid = geoCentroid(geo);\n              return (\n                selectedTowns.includes(i) && (\n                  <Annotation\n                    key={geo.rsmKey}\n                    subject={centroid}\n                    dx={-1}\n                    dy={-0.3}\n                    connectorProps={{\n                      stroke: '#CFB53B',\n                      strokeWidth: 0.02,\n                      strokeLinecap: 'round',\n                    }}\n                  >\n                    <text\n                      y={-0.11}\n                      fontSize={0.5}\n                      fontWeight={700}\n                      textAnchor=\"middle\"\n                      style={{ fill: '#CFB53B' }}\n                      onClick={() => console.log(geo.properties.town)}\n                    >\n                      {geo.properties.town}\n                    </text>\n                  </Annotation>\n                )\n              );\n            })\n          }\n        </Geographies>\n      )}\n    </ComposableMap>\n  );\n};\n\nexport default CT;\n","import React, { FunctionComponent, useState, useEffect } from 'react';\nimport { CurrentWiki } from './App';\nimport { Dots } from '@zendeskgarden/react-loaders';\nimport { Button } from '@zendeskgarden/react-buttons';\nimport styled from 'styled-components';\n\ninterface AppState {\n  status: string;\n  error?: string;\n  currentWikis?: CurrentWiki[];\n}\n\ninterface QuizProps {\n  appState: AppState;\n  selection: number | undefined;\n  selectedTowns: number[];\n  finalSelection: number;\n  finalWiki: number;\n  resetRound: Function;\n}\n\nconst ROUNDS = 2;\n\nconst QuizContainer = styled.div`\n  display: block;\n  min-height: 30vh;\n  margin: 0 16vw 0 16vw;\n\n  @media (max-width: 500px) {\n    margin: 0;\n  }\n`;\n\nconst Round = styled.h5`\n  font-weight: bold;\n  margin: 10px 0 10px 0;\n`;\n\nconst Score = styled(Round)``;\n\nconst PleaseSelect = styled(Round)``;\n\nconst Quiz: FunctionComponent<QuizProps> = ({\n  appState,\n  selection,\n  selectedTowns,\n  finalSelection,\n  finalWiki,\n  resetRound,\n}) => {\n  const [score, setScore] = useState(0);\n  const [round, setRound] = useState(1);\n  const [attempts, setAttempts] = useState(0);\n  const [isFinished, setIsFinished] = useState(false);\n\n  useEffect(() => {\n    if (selection && selection === selectedTowns[finalSelection]) {\n      setScore((prev) => prev + 1);\n      setAttempts((prev) => prev + 1);\n    }\n\n    if (selection && selection !== selectedTowns[finalSelection]) {\n      setAttempts((prev) => prev + 1);\n    }\n  }, [finalSelection, selectedTowns, selection]);\n\n  useEffect(() => {\n    if (attempts === ROUNDS) {\n      setIsFinished(true);\n    }\n  }, [attempts]);\n\n  function handleNext(): void {\n    setRound((prev) => prev + 1);\n    resetRound();\n  }\n\n  function playAgain(): void {\n    setScore(0);\n    setAttempts(0);\n    setRound(1);\n    setIsFinished(false);\n    resetRound();\n  }\n\n  function display(appState: AppState): JSX.Element | undefined {\n    switch (appState.status) {\n      case 'loading':\n        return <Dots size={50} />;\n      case 'success':\n        return (\n          <>\n            <div>\n              {appState.currentWikis &&\n                appState.currentWikis[finalWiki].summary}{' '}\n              {\n                <span>\n                  <a\n                    href={`https://${\n                      appState.currentWikis &&\n                      appState.currentWikis[finalWiki].wikipediaUrl\n                    }`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    Wiki\n                  </a>\n                </span>\n              }\n            </div>\n            <Round>Round: {round}</Round>\n            <Score>\n              {isFinished\n                ? `Final Score: ${score} / ${attempts} `\n                : `Score: ${score} / ${attempts}`}\n            </Score>\n            {selection === undefined && (\n              <PleaseSelect>Please select a town</PleaseSelect>\n            )}\n            <Button\n              disabled={selection === undefined}\n              onClick={isFinished ? playAgain : handleNext}\n            >\n              {isFinished ? `Play Again` : `Next`}\n            </Button>\n          </>\n        );\n      case 'error':\n        return <span>Error: {appState.error}</span>;\n    }\n  }\n\n  return (\n    <QuizContainer>\n      <React.Fragment>{display(appState)}</React.Fragment>\n    </QuizContainer>\n  );\n};\n\nexport default Quiz;\n","import React, {\n  useEffect,\n  useState,\n  FunctionComponent,\n  useReducer,\n  SyntheticEvent,\n} from 'react';\nimport { Point } from 'react-simple-maps';\nimport styled from 'styled-components';\n\nimport CT from './CT';\nimport Quiz from './Quiz';\n\nexport interface CurrentWiki {\n  countryCode: string;\n  distance: number;\n  elevation: number;\n  geoNameId: number;\n  lang: number;\n  lat: number;\n  rank: number;\n  summary: string;\n  title: string;\n  wikipediaUrl: string;\n}\n\ntype State =\n  | { status: 'empty' }\n  | { status: 'loading' }\n  | { status: 'error'; error: string }\n  | { status: 'success'; currentWikis: CurrentWiki[] };\n\nexport type Action =\n  | { type: 'empty' }\n  | { type: 'request' }\n  | { type: 'success'; results: CurrentWiki[] }\n  | { type: 'failure'; error: string };\n\nfunction reducer(state: State, action: Action): State {\n  switch (action.type) {\n    case 'empty':\n      return { status: 'empty' };\n    case 'request':\n      return { status: 'loading' };\n    case 'success':\n      return { status: 'success', currentWikis: action.results };\n    case 'failure':\n      return { status: 'error', error: action.error };\n    default: {\n      return { status: 'empty' };\n    }\n  }\n}\n\nconst { REACT_APP_USERNAME } = process.env;\n\nconst SELECTED_TOWNS_LENGTH = 5;\nconst WIKI_LENGTH = 3;\n\nfunction getRandomInt(max: number): number {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nconst FlexContainer = styled.div`\n  margin: 5%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  @media (max-width: 500px) {\n    justify-content: space-around;\n    height: 100vh;\n  }\n`;\n\nconst App: FunctionComponent = () => {\n  const [finalSelection, setFinalSelection] = useState(0);\n  const [finalWiki, setFinalWiki] = useState(0);\n  const [selection, setSelection] = useState<number | undefined>(undefined);\n  const [selectedTowns, setSelectedTowns] = useState<number[]>([]);\n  const [state, dispatch] = useReducer(reducer, { status: 'empty' });\n\n  useEffect(() => {\n    resetRound();\n  }, []);\n\n  function resetRound(): void {\n    setFinalWiki(getRandomInt(WIKI_LENGTH));\n    setFinalSelection(getRandomInt(SELECTED_TOWNS_LENGTH));\n    setSelection(undefined);\n\n    const selectedTowns: number[] = [];\n    while (selectedTowns.length < SELECTED_TOWNS_LENGTH) {\n      const r = Math.floor(Math.random() * 168) + 1;\n      if (selectedTowns.indexOf(r) === -1) selectedTowns.push(r);\n    }\n    setSelectedTowns(selectedTowns);\n    dispatch({ type: 'empty' });\n  }\n\n  async function findWikipedia(centroid: Point): Promise<undefined | string> {\n    try {\n      if (state.status === 'empty') {\n        dispatch({ type: 'request' });\n\n        const response: Response = await fetch(\n          `https://secure.geonames.org/findNearbyWikipediaJSON?formatted=true&lat=${centroid[1]}&lng=${centroid[0]}&username=${REACT_APP_USERNAME}&style=full`\n        );\n\n        const wiki: {\n          [geonames: string]: CurrentWiki[];\n        } = await response.json();\n\n        dispatch({ type: 'success', results: wiki.geonames });\n      }\n\n      return;\n    } catch (e) {\n      dispatch({ type: 'failure', error: e });\n      console.log('error finding wikipedia', e);\n      return e;\n    }\n  }\n\n  function handleMarkerClick(\n    e: SyntheticEvent,\n    selectedTowns: number[],\n    index: number\n  ): void {\n    e.preventDefault();\n    if (selectedTowns.includes(index) && selection === undefined) {\n      setSelection(index);\n    }\n  }\n\n  return (\n    <FlexContainer>\n      <Quiz\n        appState={state}\n        selection={selection}\n        selectedTowns={selectedTowns}\n        finalSelection={finalSelection}\n        finalWiki={finalWiki}\n        resetRound={resetRound}\n      />\n      <CT\n        findWikipedia={findWikipedia}\n        handleMarkerClick={handleMarkerClick}\n        selection={selection}\n        selectedTowns={selectedTowns}\n        finalSelection={finalSelection}\n      />\n    </FlexContainer>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ThemeProvider, DEFAULT_THEME } from '@zendeskgarden/react-theming';\nimport { css } from 'styled-components';\n\nconst customTheme = {\n  components: {\n    'buttons.button': css`\n      && {\n        color: black;\n        border-color: ${({ disabled }: { disabled: boolean }) =>\n          disabled === true ? 'none' : 'black'};\n      }\n    `,\n  },\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={{ ...DEFAULT_THEME, ...customTheme }}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}